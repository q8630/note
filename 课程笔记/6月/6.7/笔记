  闭包（广义）： 函数执行的时候会形成一个私有作用域，保护函数内部的变量不受外界干扰，我们把这种保护机制称为“闭包”

  闭包（狭义）：把函数当作一个返回值
       函数执行的时候会形成一个‘不销毁作用域’。
           只有外界变量占用了函数内部的私有变量，才会构成闭包

  闭包有两种模型：
       柯理化和函数：
           function fn(){
               return function f(){
               }
               }
       惰性函数：
           function fu(){
                return{
                    sum:function(){}
                    fib:function(){}
                    }
                 }

 为什么项目中要使用闭包？
    团队协作开发的时候，命名不冲突，自己的自己私有的，不会冲突 （保护作用 ）
    闭包的保护作用
    闭包的保存作用


    源码框架结构分析
    jQuery源码：
    (function(){
        jQuery=function(){
        }
        通过阿布jQuery 挂载到window上  暴露出接口
        window.jQuery = window.$ = jQuery;
    })()
    jQuery('li') == $('li')
    zepto源码:
    var zepto = (function(){
        return{
        }
    })()



 使用闭包的优势和弊端？
    优势： 保护作用，保存作用
    弊端： 闭包会形成不销毁的私有作用域，会造成内存泄漏，内存溢出
    闭包非常耗性能
    真实项目开发中：尽量减少闭包的使用

