
( 面向对象3大特特征)
   1、继承   2、封装（函数）   3、多态

函数    函数执行的原理：
          1、形参赋值
          2、变量提升
          3、函数自上而下执行
          4、内存释放（ 销毁）
1、函数的定义
 字面量定义
    functon 定义函数
     function  fn() {}
    构造函数定义
    var fn = new Function ()
2、函数定义好之后  必须执行才能起到函数的作用
函数的执行  函数名（）

打印函数名  打印的是整个函数
打印 函数名（）  打印的是函数的执行结果

rightClick(){}
right.click=function(){}
right.click=rightClick

setInterVal(callback,1000)
setInterVal(function(){},1000)
setInterVal(rightClick,1000)


3、函数定义的工作原理
   1、开辟一个新的堆内存空间
   2、然后把函数中的内容，当作代码字符串存进内存中
   而对象  是对象中的内容当作：键值对 一对对存进去
   3、浏览器为空间分配的地址  返回给变量



4、函数的作用  ：封装
在真实项目中，我们会把实现一个具体功能的代码封装在函数中
  1、提高开发效率。
  2、封装在一个函数中，页面中就减少重复代码的频率。

  减少了页面中代码的冗余度，提高了代码的重复利用率，实现了【低耦合高内聚】

5、想要实现封装功能  需要使用到参数
 参数分为 ：实参 形参

    函数里面对于不确定参数  有一个内置的实参集合  arguments 【可变参】
     arguments  函数的内置对象
     arguments  只有函数才有的属性
     arguments  实参集合
     arguments  类数组
     arguments 映射 【实参和形参的映射】函数在执行的时候  实参传给形参的一瞬间  建立实参形参的映射关系



      一当那建立起映射关系  当实参的集合改变的时候  形参里面存储的值也会对应改变  形参里面存储的值不会改变


6、函数的作用域
 ！全局作用域
    1、js 执行的时候 浏览器会为js 代码的执行提供一个全局的作用域
    客户端 window / node（后台） 里面global
    2、在全局作用域下执行的方法  定义的变量都属于全局变量/ 全局方法

！ 私有作用域
      1、函数执行的时候，保护函数内部的私有变量/私有方法 ，不受外界的影响
      所以构成了一个私有的作用域
      2、在函数里面定义的变量/方法都属于私有变量/方法（形参也属于私有变量）
   es6  块级作用域 用{} 包起来的称为 块级  等同于 私有作用域
   for (){ //块级作用域、私有作用域}
7、变量
 1、直接写了一个变量赋值为xxx； 他就属于全局变量
 和window 上的属性存在一一映射关系
 var b ; 声明一个变量
 b=10 ; 定义变量

  b=0  window.b  //0
  window.b='xxx'  b//xxx
  当我们定义了一个变量 b=111；相当于个window这个对象绑定了一个属性b
  存储的值为111
  for (;;){}  死循环

  2、在函数外面用var 定义的变量  也属于全局变量  和windou也存在映射关系、

  3、在函数里面 用var 关键字定义的变量 属于私有变量

  4、形参结束于私有变量

 【 作用域链:如果自己私有的 作用域中没有这个这个变量
  就会往上级作用域查找  往上级作用域一级一级查找
  一直找到window 为止的这个机制
  我们称为‘作用域链’。】




8、函数的返回值
 1、return:函数内部的私有变量，想被函数外部访问到，需要利用return
     建立起了函数内部和外部通信的桥梁
  return  中断函数

  4种场景
    1、函数没有提供返回值，外部接收到的函数的执行结果为 undefined
      var fn = sum() ; function() { 里面没有return}
    2、函数只提供一个return   返回undefined
    3、函数return sum; 返回 sum
    4、函数return; return sum ; 函数碰到第一个return 函数中断
    return false ：阻止函数默认行为

9、匿名函数
  实名函数： 函数有名字
  匿名函数： 函数没有名字

  匿名函数的执行
   (function(){});
   ~function(n){}();
   -function(n){}();
   +function(n){}();
   !function(n){}();


10、函数的递归： 函数内部自己调用自己
   死循环
   求阶乘
   斐波那契数列


 11、 回调函数：把函数作为一个参数使用
      callback 就是回调函数
     同步异步（promise 管理异步）
    setTimeout (callback , interval)

    js 里面的异步
    绑定事件属于异步
    回调函数属于异步


     同步异步概念：
     同步（一件事情完成后，再进行另一件事）
     异步（一件事情未完成，也可以开始另一件事）
      js是 单线程 的
      浏览器 是 多线程 的

       主栈队列 =>  同步
       等待任务队列 => 异步


       function(function(){}){}  => 把一个函数作为参数





  12、
  闭包（广义）： 函数执行的时候会形成一个私有作用域，保护函数内部的变量不受外界干扰，我们把这种保护机制称为“闭包”

  闭包（狭义）：把函数当作一个返回值
       函数执行的时候会形成一个‘不销毁作用域’。
           只有外界变量占用了函数内部的私有变量，才会构成闭包
           优点 ：保护、 保存
           团队协作开发时为了避免全局变量的冲突，利用闭包可以减少造成全局污染。
           问题： 1、利用闭包解决选项卡问题。2、随机数 获取问题 。 3、高级单例模式

           缺点：不可以滥用闭包，闭包非常耗费性能。 内存溢出（泄漏  IE浏览器）

  闭包有两种模型：
       柯理化和函数：
           function fn(){
               return function f(){
               }
               }
       惰性函数：
           function fu(){
                return{
                    sum:function(){}
                    fib:function(){}
                    }
                 }

 为什么项目中要使用闭包？
    源码框架结构分析
    jQuery源码
window,jQuery = window.$=jQuery

    zepto源码
return {
fn1:function(){},
fn2:function(){}
}


